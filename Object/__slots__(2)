slots只能限制添加属性，不能限制通过添加方法来添加属性：

def set_city(self, city):
    self.city=city

class Student(object):
    __slots__ = ('name', 'age', 'set_city')
    pass

Student.set_city = MethodType(set_city, Student)

a = Student()
a.set_city(Beijing)
a.city

这里其实是给类添加了一个set_city属性，a.set_city('BeiJing')其实是调用了类的属性set_city，并给类添加了一个属性city，与下面的的例子是一个道理

绑定方法
class A(object):
    def init(self,name):
        self.name = name
    def get_name(self):
        print(self.name)
def set_name(self,name):
    self.name = name

from types import MethodType

A.set_name = MethodType(set_name,A)

a1 = A('a1')
print(a1.name) #result: a1
a1.set_name('A1')这里其实是给类A添加类属性name，值为A1
print(a1.name)  #result: a1 这里不明白为啥还是打印出a1



slots确实限制了类的实例可以添加的属性及方法 ,但没有限制类
>>>class Student(object):
...    __slots__ = ('name', 'age')
...    def run(self):
...        print('hi')
...
>>>s=Student()
>>>Student.score=90
>>>s.score
90
>>>s.run()
hi
